---
interface Props {
  color?: string
  title: string
  variation?: string
  sets?: number
  reps?: number
  weight?: number
  weightUnit?: string
  additionalInfo?: string
}

const { color = 'purple', title, variation, sets, reps, weight, weightUnit, additionalInfo } = Astro.props
const lightColor = `var(--accent-light-${color})`
const darkColor = `var(--accent-dark-${color})`
const gradientColor = `var(--accent-gradient-${color})`
---

<li class='link-card'>
  <header class='flex gap-2 items-center justify-between'>
    <h3 class='mr-1 font-semibold text-xl'>{title}</h3>
    {variation && <h4 class='font-medium opacity-70'>{variation}</h4>}
  </header>

  <div class='flex gap-2 items-center justify-between text-sm'>
    <p>{sets && `${sets}x`}{reps}</p>
    <span class='opacity-90'>{weight}{weightUnit}</span>
  </div>
  {additionalInfo && <p class='text-xs opacity-90'>{additionalInfo}</p>}
</li>

<style define:vars={{ lightColor, darkColor, gradientColor }}>
  .link-card {
    @apply flex-1 flex flex-col min-w-52 w-full p-3 list-none opacity-80;
    color: white;
    background-color: #23262d;
    background-image: none;
    background-size: 400%;
    border-radius: 7px;
    background-position: 100%;
    transition: background-position 0.3s cubic-bezier(0.22, 1, 0.36, 1);
    box-shadow: inset 0 0 0 1px rgba(255, 255, 255, 0.1);
  }
  h3,
  h4 {
    transition: color 0.3s cubic-bezier(0.22, 1, 0.36, 1);
  }
  .link-card:is(:hover, :focus-within) {
    background-position: 0;
    background-image: var(--gradientColor);
  }
  .link-card:is(:hover, :focus-within) h3 {
    color: rgb(var(--lightColor));
  }
  .link-card:is(:hover, :focus-within) h4,
  .link-card:is(:hover, :focus-within) span {
    color: rgb(var(--darkColor));
  }
</style>
